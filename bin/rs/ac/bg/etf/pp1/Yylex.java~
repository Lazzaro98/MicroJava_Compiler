/* The following code was generated by JFlex 1.4.3 on 2/17/22, 2:45 AM */

package rs.ac.bg.etf.pp1;
import java_cup.runtime.Symbol;

//Sekcija import 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/17/22, 2:45 AM from the specification file
 * <tt>spec/mjlexer.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\2\1\2\1\4\1\0\1\2\1\3\22\0\1\1\1\53"+
    "\3\64\1\52\1\56\1\63\1\37\1\40\1\50\1\46\1\34\1\47"+
    "\1\35\1\51\12\65\1\36\1\33\1\55\1\45\1\54\2\64\32\66"+
    "\1\43\1\64\1\44\1\64\1\62\1\64\1\11\1\30\1\22\1\21"+
    "\1\13\1\24\1\10\1\27\1\20\1\66\1\31\1\25\1\12\1\16"+
    "\1\7\1\5\1\66\1\6\1\23\1\14\1\15\1\17\1\26\1\32"+
    "\2\66\1\41\1\57\1\42\1\64\53\0\1\61\12\0\1\61\4\0"+
    "\1\61\5\0\27\61\1\0\37\61\1\0\u01ca\61\4\0\14\61\16\0"+
    "\5\61\7\0\1\61\1\0\1\61\201\0\5\61\1\0\2\61\2\0"+
    "\4\61\1\0\1\61\6\0\1\61\1\0\3\61\1\0\1\61\1\0"+
    "\24\61\1\0\123\61\1\0\213\61\10\0\246\61\1\0\46\61\2\0"+
    "\1\61\6\0\51\61\107\0\33\61\4\0\4\61\55\0\53\61\25\0"+
    "\12\60\4\0\2\61\1\0\143\61\1\0\1\61\17\0\2\61\7\0"+
    "\2\61\12\60\3\61\2\0\1\61\20\0\1\61\1\0\36\61\35\0"+
    "\131\61\13\0\1\61\16\0\12\60\41\61\11\0\2\61\4\0\1\61"+
    "\5\0\26\61\4\0\1\61\11\0\1\61\3\0\1\61\27\0\31\61"+
    "\7\0\13\61\65\0\25\61\1\0\22\61\74\0\66\61\3\0\1\61"+
    "\22\0\1\61\7\0\12\61\4\0\12\60\1\0\20\61\4\0\10\61"+
    "\2\0\2\61\2\0\26\61\1\0\7\61\1\0\1\61\3\0\4\61"+
    "\3\0\1\61\20\0\1\61\15\0\2\61\1\0\3\61\4\0\12\60"+
    "\2\61\12\0\1\61\10\0\6\61\4\0\2\61\2\0\26\61\1\0"+
    "\7\61\1\0\2\61\1\0\2\61\1\0\2\61\37\0\4\61\1\0"+
    "\1\61\7\0\12\60\2\0\3\61\20\0\11\61\1\0\3\61\1\0"+
    "\26\61\1\0\7\61\1\0\2\61\1\0\5\61\3\0\1\61\22\0"+
    "\1\61\17\0\2\61\4\0\12\60\11\0\1\61\13\0\10\61\2\0"+
    "\2\61\2\0\26\61\1\0\7\61\1\0\2\61\1\0\5\61\3\0"+
    "\1\61\36\0\2\61\1\0\3\61\4\0\12\60\1\0\1\61\21\0"+
    "\1\61\1\0\6\61\3\0\3\61\1\0\4\61\3\0\2\61\1\0"+
    "\1\61\1\0\2\61\3\0\2\61\3\0\3\61\3\0\14\61\26\0"+
    "\1\61\25\0\12\60\25\0\10\61\1\0\3\61\1\0\27\61\1\0"+
    "\20\61\3\0\1\61\32\0\3\61\5\0\2\61\4\0\12\60\20\0"+
    "\1\61\4\0\10\61\1\0\3\61\1\0\27\61\1\0\12\61\1\0"+
    "\5\61\3\0\1\61\40\0\1\61\1\0\2\61\4\0\12\60\1\0"+
    "\2\61\21\0\11\61\1\0\3\61\1\0\51\61\2\0\1\61\20\0"+
    "\1\61\5\0\3\61\10\0\3\61\4\0\12\60\12\0\6\61\5\0"+
    "\22\61\3\0\30\61\1\0\11\61\1\0\1\61\2\0\7\61\37\0"+
    "\12\60\21\0\60\61\1\0\2\61\14\0\7\61\11\0\12\60\47\0"+
    "\2\61\1\0\1\61\1\0\5\61\1\0\30\61\1\0\1\61\1\0"+
    "\12\61\1\0\2\61\11\0\1\61\2\0\5\61\1\0\1\61\11\0"+
    "\12\60\2\0\4\61\40\0\1\61\37\0\12\60\26\0\10\61\1\0"+
    "\44\61\33\0\5\61\163\0\53\61\24\0\1\61\12\60\6\0\6\61"+
    "\4\0\4\61\3\0\1\61\3\0\2\61\7\0\3\61\4\0\15\61"+
    "\14\0\1\61\1\0\12\60\6\0\46\61\1\0\1\61\5\0\1\61"+
    "\2\0\53\61\1\0\u014d\61\1\0\4\61\2\0\7\61\1\0\1\61"+
    "\1\0\4\61\2\0\51\61\1\0\4\61\2\0\41\61\1\0\4\61"+
    "\2\0\7\61\1\0\1\61\1\0\4\61\2\0\17\61\1\0\71\61"+
    "\1\0\4\61\2\0\103\61\45\0\20\61\20\0\126\61\2\0\6\61"+
    "\3\0\u026c\61\2\0\21\61\1\0\32\61\5\0\113\61\6\0\10\61"+
    "\7\0\15\61\1\0\4\61\16\0\22\61\16\0\22\61\16\0\15\61"+
    "\1\0\3\61\17\0\64\61\43\0\1\61\4\0\1\61\3\0\12\60"+
    "\46\0\12\60\6\0\131\61\7\0\5\61\2\0\42\61\1\0\1\61"+
    "\5\0\106\61\12\0\37\61\47\0\12\60\36\61\2\0\5\61\13\0"+
    "\54\61\4\0\32\61\6\0\12\60\46\0\27\61\11\0\65\61\53\0"+
    "\12\60\6\0\12\60\15\0\1\61\135\0\57\61\21\0\7\61\4\0"+
    "\12\60\51\0\36\61\15\0\2\61\12\60\54\61\32\0\44\61\34\0"+
    "\12\60\3\0\3\61\12\60\44\61\2\0\11\61\7\0\53\61\2\0"+
    "\3\61\51\0\4\61\1\0\6\61\1\0\2\61\3\0\1\61\5\0"+
    "\300\61\100\0\u0116\61\2\0\6\61\2\0\46\61\2\0\6\61\2\0"+
    "\10\61\1\0\1\61\1\0\1\61\1\0\1\61\1\0\37\61\2\0"+
    "\65\61\1\0\7\61\1\0\1\61\3\0\3\61\1\0\7\61\3\0"+
    "\4\61\2\0\6\61\4\0\15\61\5\0\3\61\1\0\7\61\164\0"+
    "\1\61\15\0\1\61\20\0\15\61\145\0\1\61\4\0\1\61\2\0"+
    "\12\61\1\0\1\61\3\0\5\61\6\0\1\61\1\0\1\61\1\0"+
    "\1\61\1\0\4\61\1\0\13\61\2\0\4\61\5\0\5\61\4\0"+
    "\1\61\64\0\2\61\u0a7b\0\57\61\1\0\57\61\1\0\205\61\6\0"+
    "\4\61\3\0\2\61\14\0\46\61\1\0\1\61\5\0\1\61\2\0"+
    "\70\61\7\0\1\61\20\0\27\61\11\0\7\61\1\0\7\61\1\0"+
    "\7\61\1\0\7\61\1\0\7\61\1\0\7\61\1\0\7\61\1\0"+
    "\7\61\120\0\1\61\u01d5\0\2\61\52\0\5\61\5\0\2\61\4\0"+
    "\126\61\6\0\3\61\1\0\132\61\1\0\4\61\5\0\53\61\1\0"+
    "\136\61\21\0\40\61\60\0\20\61\u0200\0\u19c0\61\100\0\u51fd\61\3\0"+
    "\u048d\61\103\0\56\61\2\0\u010d\61\3\0\20\61\12\60\2\61\24\0"+
    "\57\61\20\0\37\61\2\0\106\61\61\0\11\61\2\0\147\61\2\0"+
    "\65\61\2\0\11\61\52\0\15\61\1\0\3\61\1\0\4\61\1\0"+
    "\27\61\35\0\64\61\16\0\62\61\34\0\12\60\30\0\6\61\3\0"+
    "\1\61\1\0\2\61\1\0\12\60\34\61\12\0\27\61\31\0\35\61"+
    "\7\0\57\61\34\0\1\61\12\60\6\0\5\61\1\0\12\61\12\60"+
    "\5\61\1\0\51\61\27\0\3\61\1\0\10\61\4\0\12\60\6\0"+
    "\27\61\3\0\1\61\3\0\62\61\1\0\1\61\3\0\2\61\2\0"+
    "\5\61\2\0\1\61\1\0\1\61\30\0\3\61\2\0\13\61\7\0"+
    "\3\61\14\0\6\61\2\0\6\61\2\0\6\61\11\0\7\61\1\0"+
    "\7\61\1\0\53\61\1\0\16\61\6\0\163\61\15\0\12\60\6\0"+
    "\u2ba4\61\14\0\27\61\4\0\61\61\u2104\0\u016e\61\2\0\152\61\46\0"+
    "\7\61\14\0\5\61\5\0\1\61\1\0\12\61\1\0\15\61\1\0"+
    "\5\61\1\0\1\61\1\0\2\61\1\0\2\61\1\0\154\61\41\0"+
    "\u016b\61\22\0\100\61\2\0\66\61\50\0\14\61\164\0\5\61\1\0"+
    "\207\61\23\0\12\60\7\0\32\61\6\0\32\61\13\0\131\61\3\0"+
    "\6\61\2\0\6\61\2\0\6\61\2\0\3\61\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\16\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\1\1\24\1\25"+
    "\2\1\1\26\1\1\2\27\10\3\1\30\1\31\5\3"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\0\1\42\11\3\1\43\6\3\1\44\2\3\1\45"+
    "\2\3\1\46\1\47\1\3\1\50\1\51\6\3\1\52"+
    "\4\3\1\53\1\54\1\55\1\56\1\3\1\57\1\60"+
    "\2\3\1\61\1\62\1\3\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\156\0\245\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\156\0\156\0\156\0\156\0\156"+
    "\0\156\0\156\0\156\0\156\0\156\0\u03de\0\u0415\0\u044c"+
    "\0\156\0\u0483\0\156\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596"+
    "\0\u05cd\0\u0604\0\156\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717"+
    "\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u014a\0\u014a\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\156\0\156\0\156\0\156\0\156"+
    "\0\156\0\156\0\156\0\u093d\0\156\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u014a\0\u0b63"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\156\0\u0cad\0\u0ce4"+
    "\0\u014a\0\u0d1b\0\u0d52\0\u014a\0\u014a\0\u0d89\0\u014a\0\u014a"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u014a\0\u0f0a"+
    "\0\u0f41\0\u0f78\0\u0faf\0\u014a\0\u014a\0\u014a\0\u014a\0\u0fe6"+
    "\0\u014a\0\u014a\0\u101d\0\u1054\0\u014a\0\u014a\0\u108b\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\3\1\6\1\7\1\10\1\11"+
    "\2\10\1\12\1\13\1\10\1\14\1\15\1\16\1\17"+
    "\1\20\1\10\1\21\1\10\1\22\1\10\1\23\2\10"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\10\1\3"+
    "\1\52\1\3\1\51\1\10\3\53\1\54\1\0\62\53"+
    "\73\0\1\4\67\0\1\10\1\55\24\10\25\0\3\10"+
    "\2\0\2\10\5\0\6\10\1\56\17\10\25\0\3\10"+
    "\2\0\2\10\5\0\26\10\25\0\3\10\2\0\2\10"+
    "\5\0\2\10\1\57\23\10\25\0\3\10\2\0\2\10"+
    "\5\0\20\10\1\60\4\10\1\61\25\0\3\10\2\0"+
    "\2\10\5\0\1\10\1\62\24\10\25\0\3\10\2\0"+
    "\2\10\5\0\6\10\1\63\17\10\25\0\3\10\2\0"+
    "\2\10\5\0\2\10\1\64\23\10\25\0\3\10\2\0"+
    "\2\10\5\0\17\10\1\65\6\10\25\0\3\10\2\0"+
    "\2\10\5\0\2\10\1\66\23\10\25\0\3\10\2\0"+
    "\2\10\5\0\2\10\1\67\15\10\1\70\5\10\25\0"+
    "\3\10\2\0\2\10\5\0\4\10\1\71\21\10\25\0"+
    "\3\10\2\0\2\10\5\0\22\10\1\72\3\10\25\0"+
    "\3\10\2\0\2\10\5\0\1\10\1\73\24\10\25\0"+
    "\3\10\2\0\2\10\45\0\1\74\67\0\1\75\67\0"+
    "\1\76\70\0\1\53\62\0\1\77\66\0\1\100\66\0"+
    "\1\101\77\0\1\102\67\0\1\103\67\0\1\51\4\0"+
    "\1\51\2\0\1\104\3\0\53\104\2\0\5\104\4\0"+
    "\1\105\67\0\2\10\1\106\10\10\1\107\12\10\25\0"+
    "\3\10\2\0\2\10\5\0\4\10\1\110\2\10\1\111"+
    "\5\10\1\112\10\10\25\0\3\10\2\0\2\10\5\0"+
    "\7\10\1\113\16\10\25\0\3\10\2\0\2\10\5\0"+
    "\16\10\1\114\7\10\25\0\3\10\2\0\2\10\5\0"+
    "\7\10\1\115\16\10\25\0\3\10\2\0\2\10\5\0"+
    "\10\10\1\116\15\10\25\0\3\10\2\0\2\10\5\0"+
    "\21\10\1\117\4\10\25\0\3\10\2\0\2\10\5\0"+
    "\13\10\1\120\12\10\25\0\3\10\2\0\2\10\5\0"+
    "\11\10\1\121\14\10\25\0\3\10\2\0\2\10\5\0"+
    "\4\10\1\122\21\10\25\0\3\10\2\0\2\10\5\0"+
    "\20\10\1\123\5\10\25\0\3\10\2\0\2\10\5\0"+
    "\13\10\1\124\12\10\25\0\3\10\2\0\2\10\5\0"+
    "\6\10\1\125\17\10\25\0\3\10\2\0\2\10\63\0"+
    "\1\126\10\0\3\10\1\127\22\10\25\0\3\10\2\0"+
    "\2\10\5\0\11\10\1\130\14\10\25\0\3\10\2\0"+
    "\2\10\5\0\14\10\1\131\11\10\25\0\3\10\2\0"+
    "\2\10\5\0\10\10\1\132\15\10\25\0\3\10\2\0"+
    "\2\10\5\0\2\10\1\133\23\10\25\0\3\10\2\0"+
    "\2\10\5\0\2\10\1\134\23\10\25\0\3\10\2\0"+
    "\2\10\5\0\6\10\1\135\17\10\25\0\3\10\2\0"+
    "\2\10\5\0\6\10\1\136\17\10\25\0\3\10\2\0"+
    "\2\10\5\0\6\10\1\137\17\10\25\0\3\10\2\0"+
    "\2\10\5\0\14\10\1\140\11\10\25\0\3\10\2\0"+
    "\2\10\5\0\7\10\1\141\6\10\1\142\7\10\25\0"+
    "\3\10\2\0\2\10\5\0\16\10\1\143\7\10\25\0"+
    "\3\10\2\0\2\10\5\0\16\10\1\116\7\10\25\0"+
    "\3\10\2\0\2\10\5\0\20\10\1\144\5\10\25\0"+
    "\3\10\2\0\2\10\5\0\4\10\1\145\21\10\25\0"+
    "\3\10\2\0\2\10\5\0\1\10\1\146\24\10\25\0"+
    "\3\10\2\0\2\10\5\0\7\10\1\147\16\10\25\0"+
    "\3\10\2\0\2\10\5\0\1\10\1\150\24\10\25\0"+
    "\3\10\2\0\2\10\5\0\1\10\1\151\24\10\25\0"+
    "\3\10\2\0\2\10\5\0\11\10\1\152\14\10\25\0"+
    "\3\10\2\0\2\10\5\0\13\10\1\153\12\10\25\0"+
    "\3\10\2\0\2\10\5\0\7\10\1\154\16\10\25\0"+
    "\3\10\2\0\2\10\5\0\16\10\1\155\7\10\25\0"+
    "\3\10\2\0\2\10\5\0\6\10\1\156\17\10\25\0"+
    "\3\10\2\0\2\10\5\0\24\10\1\157\1\10\25\0"+
    "\3\10\2\0\2\10\5\0\4\10\1\160\21\10\25\0"+
    "\3\10\2\0\2\10\5\0\11\10\1\161\14\10\25\0"+
    "\3\10\2\0\2\10\5\0\14\10\1\162\11\10\25\0"+
    "\3\10\2\0\2\10\5\0\14\10\1\163\11\10\25\0"+
    "\3\10\2\0\2\10\5\0\11\10\1\164\14\10\25\0"+
    "\3\10\2\0\2\10\5\0\5\10\1\165\20\10\25\0"+
    "\3\10\2\0\2\10\5\0\16\10\1\166\7\10\25\0"+
    "\3\10\2\0\2\10\5\0\10\10\1\167\15\10\25\0"+
    "\3\10\2\0\2\10\5\0\6\10\1\170\17\10\25\0"+
    "\3\10\2\0\2\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4290];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\17\1\12\11\3\1\1\11\1\1\1\11"+
    "\7\1\1\11\20\1\10\11\1\0\1\11\20\1\1\11"+
    "\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // ukljucivanje informacije o poziciji tokena
	private Symbol new_symbol(int type) {
		return new Symbol(type, yyline+1, yycolumn);
	}
	
	// ukljucivanje informacije o poziciji tokena
	private Symbol new_symbol(int type, Object value) {
		return new Symbol(type, yyline+1, yycolumn, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1756) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return new_symbol(sym.COLON, yytext());
          }
        case 52: break;
        case 15: 
          { return new_symbol(sym.PLUS, yytext());
          }
        case 53: break;
        case 9: 
          { return new_symbol(sym.RPAREN, yytext());
          }
        case 54: break;
        case 36: 
          { return new_symbol(sym.CHAR, new Character(yytext().charAt(1)));
          }
        case 55: break;
        case 5: 
          { return new_symbol(sym.COMMA, yytext());
          }
        case 56: break;
        case 50: 
          { return new_symbol(sym.EXTENDS, yytext());
          }
        case 57: break;
        case 35: 
          { return new_symbol(sym.NEW, yytext());
          }
        case 58: break;
        case 11: 
          { return new_symbol(sym.RBRACE, yytext());
          }
        case 59: break;
        case 39: 
          { return new_symbol(sym.ELSE, yytext());
          }
        case 60: break;
        case 24: 
          { return new_symbol(sym.IF, yytext());
          }
        case 61: break;
        case 6: 
          { return new_symbol(sym.DOT, yytext());
          }
        case 62: break;
        case 22: 
          { return new_symbol(sym.NUMBER, new Integer (yytext()));
          }
        case 63: break;
        case 18: 
          { return new_symbol(sym.DIV, yytext());
          }
        case 64: break;
        case 3: 
          { return new_symbol (sym.IDENT, yytext());
          }
        case 65: break;
        case 16: 
          { return new_symbol(sym.MINUS, yytext());
          }
        case 66: break;
        case 1: 
          { System.err.println("Leksicka greska ("+ yytext() + ") u liniji "+ (yyline + 1) + " i u koloni " + (yycolumn + 1));
          }
        case 67: break;
        case 29: 
          { return new_symbol(sym.NOT_EQUAL, yytext());
          }
        case 68: break;
        case 26: 
          { return new_symbol(sym.EQUAL_COMPARE, yytext());
          }
        case 69: break;
        case 41: 
          { return new_symbol(sym.VOID, yytext());
          }
        case 70: break;
        case 34: 
          { yybegin(YYINITIAL);
          }
        case 71: break;
        case 43: 
          { return new_symbol(sym.CONST, yytext());
          }
        case 72: break;
        case 40: 
          { return new_symbol(sym.BOOLEAN, new Integer (yytext().equals("true") ? 1 : 0));
          }
        case 73: break;
        case 32: 
          { return new_symbol(sym.AND, yytext());
          }
        case 74: break;
        case 8: 
          { return new_symbol(sym.LPAREN, yytext());
          }
        case 75: break;
        case 14: 
          { return new_symbol(sym.EQUAL, yytext());
          }
        case 76: break;
        case 21: 
          { return new_symbol(sym.LESS, yytext());
          }
        case 77: break;
        case 23: 
          { yybegin(COMMENT);
          }
        case 78: break;
        case 12: 
          { return new_symbol(sym.LSQUARE, yytext());
          }
        case 79: break;
        case 19: 
          { return new_symbol(sym.MOD, yytext());
          }
        case 80: break;
        case 17: 
          { return new_symbol(sym.MUL, yytext());
          }
        case 81: break;
        case 46: 
          { return new_symbol(sym.BREAK, yytext());
          }
        case 82: break;
        case 10: 
          { return new_symbol(sym.LBRACE, yytext());
          }
        case 83: break;
        case 37: 
          { return new_symbol(sym.READ, yytext());
          }
        case 84: break;
        case 27: 
          { return new_symbol(sym.INC, yytext());
          }
        case 85: break;
        case 38: 
          { return new_symbol(sym.GOTO, yytext());
          }
        case 86: break;
        case 20: 
          { return new_symbol(sym.GREATER, yytext());
          }
        case 87: break;
        case 45: 
          { return new_symbol(sym.WHILE, yytext());
          }
        case 88: break;
        case 30: 
          { return new_symbol(sym.GREATER_EQUAL, yytext());
          }
        case 89: break;
        case 31: 
          { return new_symbol(sym.LESS_EQUAL, yytext());
          }
        case 90: break;
        case 4: 
          { return new_symbol(sym.SEMI, yytext());
          }
        case 91: break;
        case 42: 
          { return new_symbol(sym.PRINT, yytext());
          }
        case 92: break;
        case 25: 
          { return new_symbol(sym.DO, yytext());
          }
        case 93: break;
        case 44: 
          { return new_symbol(sym.CLASS, yytext());
          }
        case 94: break;
        case 49: 
          { return new_symbol(sym.PROG, yytext());
          }
        case 95: break;
        case 13: 
          { return new_symbol(sym.RSQUARE, yytext());
          }
        case 96: break;
        case 48: 
          { return new_symbol(sym.RECORD, yytext());
          }
        case 97: break;
        case 47: 
          { return new_symbol(sym.RETURN, yytext());
          }
        case 98: break;
        case 51: 
          { return new_symbol(sym.CONTINUE, yytext());
          }
        case 99: break;
        case 33: 
          { return new_symbol(sym.OR, yytext());
          }
        case 100: break;
        case 28: 
          { return new_symbol(sym.DEC, yytext());
          }
        case 101: break;
        case 2: 
          { 
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return new_symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
